import asyncio
import datetime
import logging

import requests
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from BL.cur_week import get_cur_week
from BL.parser import parse
from DB.db import BotDB
from settings import config

BOT_DB = BotDB(config.database_filename)
exampleURL = 'https://ssau.ru/rasp?groupId='

HELP_COMMAND = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n
‚Ä¢ <b>/help</b> - –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ <b>/start</b> - –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
‚Ä¢ <b>/get</b> - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
‚Ä¢ <b>/set</b> - –¥–ª—è —Å–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
"""


class TelegramBot:
    bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="HTML")
    dp = Dispatcher(bot)

    @staticmethod
    async def run():
        await TelegramBot.dp.start_polling(TelegramBot.bot)

    @staticmethod
    @dp.message_handler(commands="start")
    async def cmd_start(message: types.Message):
        logging.debug(f"start {message.from_user.id = } {datetime.datetime.now()}")

        if not BOT_DB.user_exists(message.from_user.id):
            BOT_DB.add_user(message.from_user.id, message.from_user.full_name)
            logging.info(f"add new user: {message.from_user.id = }")

            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n'
                                 f'–Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –ø—Ä—è–º–æ –≤ Telegram!\n'
                                 f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ {exampleURL} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, '
                                 f'—á—Ç–æ–±—ã —è –º–æ–≥ –∑–∞–ø–æ–º–Ω–∏—Ç—å –µ–≥–æ –¥–ª—è —Ç–µ–±—è :)')
        else:
            await message.answer(f"–í—Å—ë –æ–∫, {message.from_user.first_name}, —è —Ç–µ–±—è –ø–æ–º–Ω—é.\n"
                                 f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{BOT_DB.get_schedule_link(message.from_user.id)}")

    @staticmethod
    @dp.message_handler(regexp=r"[–ü–ø]–æ–º–æ—â—å|[Hh]elp")
    async def cmd_help(message: types.Message):
        logging.debug(f"help {message.from_user.id = } {datetime.datetime.now()}")

        await message.answer(text=HELP_COMMAND)

    @staticmethod
    @dp.message_handler(regexp=r"–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|get")
    async def cmd_get(message: types.Message):
        logging.debug(f"get {message.from_user.id = } {datetime.datetime.now()}")

        if BOT_DB.user_exists(message.from_user.id):
            schedule_url = BOT_DB.get_schedule_link(message.from_user.id)

            if schedule_url:

                group, days = parse(schedule_url)
                await message.answer("–ì–æ—Ç–æ–≤–æ üòâ\n"
                                     f"–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group} –Ω–∞ {get_cur_week()} –Ω–µ–¥–µ–ª—é:")

                type_short = 'dict'
                for day in days:
                    msg = f"<b>{day.name.title()}</b> - <i>{day.date.strftime('%d.%m.%Y')}</i>\n\n"
                    if len(day):
                        pairs = []
                        exists = False
                        for pair in reversed(list(day)):

                            if pair.exist:
                                exists = True

                            if not exists:
                                continue

                            if pair.exist:
                                pairs.append(f"<b>{pair.number}</b> | {pair.time} | "
                                             f"<b><u>{pair.discipline[type_short]}</u></b> | "
                                             f"{'online' if pair.place.online else pair.place} | ")
                            else:
                                pairs.append(f"<b>{pair.number}</b> | {pair.time} | {'-' * 15}")

                        pairs.reverse()
                        msg += '\n'.join(pairs)
                    else:
                        msg += '–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –ø–∞—Ä - —á–∏–ª–∏–º üòé'
                    await message.answer(msg)
            else:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        else:
            await message.answer("–ù–æ –º—ã –∂–µ –µ—â—ë –Ω–µ –∑–Ω–∞–∫–æ–º—ã ü§®.\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.")

    @staticmethod
    @dp.message_handler(commands="set")
    async def cmd_set(message: types.Message):
        logging.debug(f"help {message.from_user.id = } {datetime.datetime.now()}")

        await message.answer(f'–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                             f'{exampleURL}#########, –≥–¥–µ –≤–º–µ—Å—Ç–æ —Ä–µ—à—ë—Ç–æ–∫ id —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')

    @staticmethod
    @dp.message_handler()
    async def set_schedule_link(message: types.Message):
        schedule_url = message.text
        if exampleURL in schedule_url:
            if requests.get(schedule_url).status_code == 200:
                if BOT_DB.user_exists(message.from_user.id):
                    BOT_DB.set_schedule_link(message.from_user.id, schedule_url)

                    kb = ReplyKeyboardMarkup(resize_keyboard=True)
                    button_get_schedule = KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                    button_help = KeyboardButton(text="–ü–æ–º–æ—â—å")
                    kb.add(button_get_schedule, button_help)

                    await message.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ—é –≥—Ä—É–ø–ø—É, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
                        reply_markup=kb)
                else:
                    await message.answer("–°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.")
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏ —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å")


async def main():
    bot = TelegramBot()
    await bot.run()


if __name__ == "__main__":
    asyncio.run(main())
